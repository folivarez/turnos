'use strict';
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var node_fetch_1 = require("node-fetch");
var stream_1 = require("stream");
var uuid = require("uuid");
// tslint:disable-next-line variable-name
var HttpsProxyAgent = require('https-proxy-agent');
var requestToFetchOptions = function (reqOpts) {
    var options = __assign({ method: reqOpts.method || 'GET' }, reqOpts.timeout && { timeout: reqOpts.timeout }, reqOpts.gzip && { compress: reqOpts.gzip });
    if (typeof reqOpts.json === 'object') {
        // Add Content-type: application/json header
        if (!reqOpts.headers) {
            reqOpts.headers = {};
        }
        reqOpts.headers['Content-Type'] = 'application/json';
        // Set body to JSON representation of value
        options.body = JSON.stringify(reqOpts.json);
    }
    else {
        if (typeof reqOpts.body !== 'string') {
            options.body = JSON.stringify(reqOpts.body);
        }
        else {
            options.body = reqOpts.body;
        }
    }
    options.headers = reqOpts.headers;
    var uri = reqOpts.uri;
    if (reqOpts.useQuerystring === true || typeof reqOpts.qs === 'object') {
        var qs = require('querystring');
        var params = qs.stringify(reqOpts.qs);
        uri = uri + '?' + params;
    }
    if (reqOpts.proxy || process.env.HTTP_PROXY || process.env.HTTPS_PROXY) {
        var proxy = (process.env.HTTP_PROXY || process.env.HTTPS_PROXY);
        options.agent = new HttpsProxyAgent(proxy);
    }
    return [uri, options];
};
var fetchToRequestResponse = function (res) {
    var response = {
        statusCode: res.status,
        statusMessage: res.statusText,
    };
    return response;
};
// create POST body from two parts as multipart/related content-type
var createMultipartStream = function (boundary, multipart) {
    var finale = "--" + boundary + "--";
    var stream = new stream_1.PassThrough();
    for (var _i = 0, multipart_1 = multipart; _i < multipart_1.length; _i++) {
        var part = multipart_1[_i];
        var preamble = "--" + boundary + "\r\nContent-Type: " + part['Content-Type'] + "\r\n\r\n";
        stream.write(preamble);
        if (typeof part.body === 'string') {
            stream.write(part.body);
            stream.write('\r\n');
        }
        else {
            part.body.pipe(stream, { end: false });
            part.body.on('end', function () {
                stream.write('\r\n');
                stream.write(finale);
                stream.end();
            });
        }
    }
    return stream;
};
var teenyRequest = (function (reqOpts, callback) {
    var _a = requestToFetchOptions(reqOpts), uri = _a[0], options = _a[1];
    var multipart = reqOpts.multipart;
    if (reqOpts.multipart && multipart.length === 2) {
        if (!callback) {
            console.log('Error, multipart without callback not implemented.');
            return;
        }
        var boundary = uuid.v4();
        options.headers['Content-Type'] =
            "multipart/related; boundary=" + boundary;
        options.body = createMultipartStream(boundary, multipart);
        // Multipart upload
        node_fetch_1.default(uri, options)
            .then(function (res) {
            var header = res.headers.get('content-type');
            if (header === 'application/json' ||
                header === 'application/json; charset=utf-8') {
                var response_1 = fetchToRequestResponse(res);
                res.json()
                    .then(function (json) {
                    response_1.body = json;
                    callback(null, response_1, json);
                })
                    .catch(function (err) {
                    callback(err);
                });
                return;
            }
            res.text()
                .then(function (text) {
                var response = fetchToRequestResponse(res);
                response.body = text;
                callback(null, response, text);
            })
                .catch(function (err) {
                callback(err);
            });
        })
            .catch(function (err) {
            callback(err);
        });
        return;
    }
    if (callback === undefined) { // Stream mode
        var requestStream_1 = new stream_1.PassThrough();
        options.compress = false;
        node_fetch_1.default(uri, options)
            .then(function (res) {
            if (!res.ok) {
                res.text()
                    .then(function (text) {
                    // tslint:disable-next-line:no-any
                    var error = new Error(text);
                    error.code = res.status;
                    requestStream_1.emit('error', error);
                    return;
                })
                    .catch(function (error) {
                    requestStream_1.emit('error', error);
                });
                return;
            }
            var encoding = res.headers.get('content-encoding');
            res.body.on('error', function (err) {
                console.log('whoa there was an error, passing it on: ' + err);
                requestStream_1.emit('error', err);
            });
            // tslint:disable-next-line:no-any
            res.body.toJSON = function () {
                var headers = __assign({}, (encoding && { 'content-encoding': encoding }));
                return { headers: headers };
            };
            requestStream_1.emit('response', res.body);
        })
            .catch(function (err) {
            console.log('such a nice error:' + err);
            requestStream_1.emit('error', err);
        });
        // fetch doesn't supply the raw HTTP stream, instead it
        // returns a PassThrough piped from the HTTP response
        // stream.
        return requestStream_1;
    }
    // GET or POST with callback
    node_fetch_1.default(uri, options)
        .then(function (res) {
        var header = res.headers.get('content-type');
        if (header === 'application/json' ||
            header === 'application/json; charset=utf-8') {
            var response_2 = fetchToRequestResponse(res);
            if (response_2.statusCode === 204) {
                // Probably a DELETE
                callback(null, response_2, response_2);
                return;
            }
            res.json()
                .then(function (json) {
                response_2.body = json;
                callback(null, response_2, json);
            })
                .catch(function (err) {
                callback(err);
            });
            return;
        }
        res.text()
            .then(function (text) {
            var response = fetchToRequestResponse(res);
            response.body = text;
            callback(null, response, text);
        })
            .catch(function (err) {
            callback(err);
        });
    })
        .catch(function (err) {
        callback(err);
    });
    return;
});
exports.teenyRequest = teenyRequest;
teenyRequest.defaults = function (defaults) {
    return function (reqOpts, callback) {
        return teenyRequest(__assign({}, defaults, reqOpts), callback);
    };
};
//# sourceMappingURL=index.js.map
"use strict";
/**
 * Copyright 2014 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/*!
 * @module common/util
 */
var projectify_1 = require("@google-cloud/projectify");
var duplexify = require("duplexify");
var ent = require("ent");
var extend = require("extend");
var google_auth_library_1 = require("google-auth-library");
var is = require("is");
var retryRequest = require("retry-request");
var through = require("through2");
var requestDefaults = {
    timeout: 60000,
    gzip: true,
    forever: true,
    pool: {
        maxSockets: Infinity,
    },
};
/**
 * Custom error type for API errors.
 *
 * @param {object} errorBody - Error object.
 */
var ApiError = /** @class */ (function (_super) {
    __extends(ApiError, _super);
    function ApiError(errorBodyOrMessage) {
        var _this = _super.call(this) || this;
        if (typeof errorBodyOrMessage !== 'object') {
            _this.message = errorBodyOrMessage || '';
            return _this;
        }
        var errorBody = errorBodyOrMessage;
        _this.code = errorBody.code;
        _this.errors = errorBody.errors;
        _this.response = errorBody.response;
        try {
            _this.errors = JSON.parse(_this.response.body).error.errors;
        }
        catch (e) {
            _this.errors = errorBody.errors;
        }
        var messages = [];
        if (errorBody.message) {
            messages.push(errorBody.message);
        }
        if (_this.errors && _this.errors.length === 1) {
            messages.push(_this.errors[0].message);
        }
        else if (_this.response && _this.response.body) {
            messages.push(ent.decode(errorBody.response.body.toString()));
        }
        else if (!errorBody.message) {
            messages.push('Error during request.');
        }
        _this.message = Array.from(new Set(messages)).join(' - ');
        return _this;
    }
    return ApiError;
}(Error));
exports.ApiError = ApiError;
/**
 * Custom error type for partial errors returned from the API.
 *
 * @param {object} b - Error object.
 */
var PartialFailureError = /** @class */ (function (_super) {
    __extends(PartialFailureError, _super);
    function PartialFailureError(b) {
        var _this = _super.call(this) || this;
        var errorObject = b;
        _this.errors = errorObject.errors;
        _this.name = 'PartialFailureError';
        _this.response = errorObject.response;
        var defaultErrorMessage = 'A failure occurred during this request.';
        _this.message = errorObject.message || defaultErrorMessage;
        return _this;
    }
    return PartialFailureError;
}(Error));
exports.PartialFailureError = PartialFailureError;
var Util = /** @class */ (function () {
    function Util() {
        this.ApiError = ApiError;
        this.PartialFailureError = PartialFailureError;
    }
    /**
     * No op.
     *
     * @example
     * function doSomething(callback) {
     *   callback = callback || noop;
     * }
     */
    Util.prototype.noop = function () { };
    /**
     * Uniformly process an API response.
     *
     * @param {*} err - Error value.
     * @param {*} resp - Response value.
     * @param {*} body - Body value.
     * @param {function} callback - The callback function.
     */
    Util.prototype.handleResp = function (err, resp, body, callback) {
        callback = callback || util.noop;
        var parsedResp = extend(true, { err: err || null }, resp && util.parseHttpRespMessage(resp), body && util.parseHttpRespBody(body));
        // Assign the parsed body to resp.body, even if { json: false } was passed
        // as a request option.
        // We assume that nobody uses the previously unparsed value of resp.body.
        if (!parsedResp.err && resp && typeof parsedResp.body === 'object') {
            parsedResp.resp.body = parsedResp.body;
        }
        callback(parsedResp.err, parsedResp.body, parsedResp.resp);
    };
    /**
     * Sniff an incoming HTTP response message for errors.
     *
     * @param {object} httpRespMessage - An incoming HTTP response message from `request`.
     * @return {object} parsedHttpRespMessage - The parsed response.
     * @param {?error} parsedHttpRespMessage.err - An error detected.
     * @param {object} parsedHttpRespMessage.resp - The original response object.
     */
    Util.prototype.parseHttpRespMessage = function (httpRespMessage) {
        var parsedHttpRespMessage = {
            resp: httpRespMessage,
        };
        if (httpRespMessage.statusCode < 200 || httpRespMessage.statusCode > 299) {
            // Unknown error. Format according to ApiError standard.
            parsedHttpRespMessage.err = new ApiError({
                errors: new Array(),
                code: httpRespMessage.statusCode,
                message: httpRespMessage.statusMessage,
                response: httpRespMessage,
            });
        }
        return parsedHttpRespMessage;
    };
    /**
     * Parse the response body from an HTTP request.
     *
     * @param {object} body - The response body.
     * @return {object} parsedHttpRespMessage - The parsed response.
     * @param {?error} parsedHttpRespMessage.err - An error detected.
     * @param {object} parsedHttpRespMessage.body - The original body value provided
     *     will try to be JSON.parse'd. If it's successful, the parsed value will
     * be returned here, otherwise the original value.
     */
    Util.prototype.parseHttpRespBody = function (body) {
        var parsedHttpRespBody = {
            body: body,
        };
        if (is.string(body)) {
            try {
                parsedHttpRespBody.body = JSON.parse(body);
            }
            catch (err) {
                parsedHttpRespBody.err = new ApiError('Cannot parse JSON response');
            }
        }
        if (parsedHttpRespBody.body && parsedHttpRespBody.body.error) {
            // Error from JSON API.
            parsedHttpRespBody.err = new ApiError(parsedHttpRespBody.body.error);
        }
        return parsedHttpRespBody;
    };
    /**
     * Take a Duplexify stream, fetch an authenticated connection header, and
     * create an outgoing writable stream.
     *
     * @param {Duplexify} dup - Duplexify stream.
     * @param {object} options - Configuration object.
     * @param {module:common/connection} options.connection - A connection instance used to get a token with and send the request through.
     * @param {object} options.metadata - Metadata to send at the head of the request.
     * @param {object} options.request - Request object, in the format of a standard Node.js http.request() object.
     * @param {string=} options.request.method - Default: "POST".
     * @param {string=} options.request.qs.uploadType - Default: "multipart".
     * @param {string=} options.streamContentType - Default: "application/octet-stream".
     * @param {function} onComplete - Callback, executed after the writable Request stream has completed.
     */
    Util.prototype.makeWritableStream = function (dup, options, onComplete) {
        onComplete = onComplete || util.noop;
        var writeStream = through();
        dup.setWritable(writeStream);
        var defaultReqOpts = {
            method: 'POST',
            qs: {
                uploadType: 'multipart',
            },
        };
        var metadata = options.metadata || {};
        var reqOpts = extend(true, defaultReqOpts, options.request, {
            multipart: [
                {
                    'Content-Type': 'application/json',
                    body: JSON.stringify(metadata),
                },
                {
                    'Content-Type': metadata.contentType ||
                        'application/octet-stream',
                    body: writeStream,
                },
            ],
        });
        options.makeAuthenticatedRequest(reqOpts, {
            onAuthenticated: function (err, authenticatedReqOpts) {
                if (err) {
                    dup.destroy(err);
                    return;
                }
                var request = options.requestModule.defaults(requestDefaults);
                request(authenticatedReqOpts, function (err, resp, body) {
                    util.handleResp(err, resp, body, function (err, data) {
                        if (err) {
                            dup.destroy(err);
                            return;
                        }
                        dup.emit('response', resp);
                        onComplete(data);
                    });
                });
            },
        });
    };
    /**
     * Returns true if the API request should be retried, given the error that was
     * given the first time the request was attempted. This is used for rate limit
     * related errors as well as intermittent server errors.
     *
     * @param {error} err - The API error to check if it is appropriate to retry.
     * @return {boolean} True if the API request should be retried, false otherwise.
     */
    Util.prototype.shouldRetryRequest = function (err) {
        if (err) {
            if ([429, 500, 502, 503].indexOf(err.code) !== -1) {
                return true;
            }
            if (err.errors) {
                for (var _i = 0, _a = err.errors; _i < _a.length; _i++) {
                    var e = _a[_i];
                    var reason = e.reason;
                    if (reason === 'rateLimitExceeded') {
                        return true;
                    }
                    if (reason === 'userRateLimitExceeded') {
                        return true;
                    }
                }
            }
        }
        return false;
    };
    /**
     * Get a function for making authenticated requests.
     *
     * @param {object} config - Configuration object.
     * @param {boolean=} config.autoRetry - Automatically retry requests if the
     *     response is related to rate limits or certain intermittent server
     * errors. We will exponentially backoff subsequent requests by default.
     * (default: true)
     * @param {object=} config.credentials - Credentials object.
     * @param {boolean=} config.customEndpoint - If true, just return the provided request options. Default: false.
     * @param {string=} config.email - Account email address, required for PEM/P12 usage.
     * @param {number=} config.maxRetries - Maximum number of automatic retries attempted before returning the error. (default: 3)
     * @param {string=} config.keyFile - Path to a .json, .pem, or .p12 keyfile.
     * @param {array} config.scopes - Array of scopes required for the API.
     */
    Util.prototype.makeAuthenticatedRequestFactory = function (config) {
        var googleAutoAuthConfig = extend({}, config);
        if (googleAutoAuthConfig.projectId === '{{projectId}}') {
            delete googleAutoAuthConfig.projectId;
        }
        var authClient = new google_auth_library_1.GoogleAuth(googleAutoAuthConfig);
        function makeAuthenticatedRequest(reqOpts, optionsOrCallback) {
            var stream;
            var reqConfig = extend({}, config);
            var activeRequest_;
            if (!optionsOrCallback) {
                stream = duplexify();
                reqConfig.stream = stream;
            }
            var options = typeof optionsOrCallback === 'object' ? optionsOrCallback : undefined;
            var callback = typeof optionsOrCallback === 'function' ?
                optionsOrCallback :
                undefined;
            var onAuthenticated = function (err, authenticatedReqOpts) {
                var autoAuthFailed = err &&
                    err.message.indexOf('Could not load the default credentials') >
                        -1;
                if (autoAuthFailed) {
                    // Even though authentication failed, the API might not actually
                    // care.
                    authenticatedReqOpts = reqOpts;
                }
                if (!err || autoAuthFailed) {
                    // tslint:disable-next-line:no-any
                    var projectId = authClient._cachedProjectId;
                    if (config.projectId && config.projectId !== '{{projectId}}') {
                        projectId = config.projectId;
                    }
                    try {
                        authenticatedReqOpts =
                            util.decorateRequest(authenticatedReqOpts, projectId);
                        err = null;
                    }
                    catch (e) {
                        // A projectId was required, but we don't have one.
                        // Re-use the "Could not load the default credentials error" if
                        // auto auth failed.
                        err = err || e;
                    }
                }
                if (err) {
                    if (stream) {
                        stream.destroy(err);
                    }
                    else {
                        var fn = options && options.onAuthenticated ?
                            options.onAuthenticated :
                            callback;
                        fn(err);
                    }
                    return;
                }
                if (options && options.onAuthenticated) {
                    options.onAuthenticated(null, authenticatedReqOpts);
                }
                else {
                    activeRequest_ =
                        util.makeRequest(authenticatedReqOpts, reqConfig, callback);
                }
            };
            if (reqConfig.customEndpoint) {
                // Using a custom API override. Do not use `google-auth-library` for
                // authentication. (ex: connecting to a local Datastore server)
                onAuthenticated(null, reqOpts);
            }
            else {
                authClient.authorizeRequest(reqOpts).then(function (res) {
                    var opts = extend(true, {}, reqOpts, res);
                    onAuthenticated(null, opts);
                }, function (err) {
                    onAuthenticated(err);
                });
            }
            if (stream) {
                return stream;
            }
            return {
                abort: function () {
                    setImmediate(function () {
                        if (activeRequest_) {
                            activeRequest_.abort();
                            activeRequest_ = null;
                        }
                    });
                },
            };
        }
        var mar = makeAuthenticatedRequest;
        mar.getCredentials = authClient.getCredentials.bind(authClient);
        mar.authClient = authClient;
        return mar;
    };
    /**
     * Make a request through the `retryRequest` module with built-in error
     * handling and exponential back off.
     *
     * @param {object} reqOpts - Request options in the format `request` expects.
     * @param {object=} config - Configuration object.
     * @param {boolean=} config.autoRetry - Automatically retry requests if the
     *     response is related to rate limits or certain intermittent server
     * errors. We will exponentially backoff subsequent requests by default.
     * (default: true)
     * @param {number=} config.maxRetries - Maximum number of automatic retries
     *     attempted before returning the error. (default: 3)
     * @param {typeof r=} config.request - HTTP module for request calls.
     * @param {function} callback - The callback function.
     */
    Util.prototype.makeRequest = function (reqOpts, config, callback) {
        var options = {
            request: config.request.defaults(requestDefaults),
            retries: config.autoRetry !== false ? config.maxRetries || 3 : 0,
            shouldRetryFn: function (httpRespMessage) {
                var err = util.parseHttpRespMessage(httpRespMessage).err;
                return err && util.shouldRetryRequest(err);
            },
        };
        if (!config.stream) {
            return retryRequest(reqOpts, options, function (err, response, body) {
                util.handleResp(err, response, body, callback);
            });
        }
        var dup = config.stream;
        // tslint:disable-next-line:no-any
        var requestStream;
        var isGetRequest = (reqOpts.method || 'GET').toUpperCase() === 'GET';
        if (isGetRequest) {
            requestStream = retryRequest(reqOpts, options);
            dup.setReadable(requestStream);
        }
        else {
            // Streaming writable HTTP requests cannot be retried.
            var request = options.request.defaults(requestDefaults);
            requestStream = request(reqOpts);
            dup.setWritable(requestStream);
        }
        // Replay the Request events back to the stream.
        requestStream.on('error', dup.destroy.bind(dup))
            .on('response', dup.emit.bind(dup, 'response'))
            .on('complete', dup.emit.bind(dup, 'complete'));
        dup.abort = requestStream.abort;
        return dup;
    };
    /**
     * Decorate the options about to be made in a request.
     *
     * @param {object} reqOpts - The options to be passed to `request`.
     * @param {string} projectId - The project ID.
     * @return {object} reqOpts - The decorated reqOpts.
     */
    Util.prototype.decorateRequest = function (reqOpts, projectId) {
        delete reqOpts.autoPaginate;
        delete reqOpts.autoPaginateVal;
        delete reqOpts.objectMode;
        if (is.object(reqOpts.qs)) {
            delete reqOpts.qs.autoPaginate;
            delete reqOpts.qs.autoPaginateVal;
            reqOpts.qs = projectify_1.replaceProjectIdToken(reqOpts.qs, projectId);
        }
        if (is.array(reqOpts.multipart)) {
            reqOpts.multipart = reqOpts.multipart.map(function (part) {
                return projectify_1.replaceProjectIdToken(part, projectId);
            });
        }
        if (is.object(reqOpts.json)) {
            delete reqOpts.json.autoPaginate;
            delete reqOpts.json.autoPaginateVal;
            reqOpts.json = projectify_1.replaceProjectIdToken(reqOpts.json, projectId);
        }
        reqOpts.uri = projectify_1.replaceProjectIdToken(reqOpts.uri, projectId);
        return reqOpts;
    };
    // tslint:disable-next-line:no-any
    Util.prototype.isCustomType = function (unknown, module) {
        function getConstructorName(obj) {
            return obj.constructor && obj.constructor.name.toLowerCase();
        }
        var moduleNameParts = module.split('/');
        var parentModuleName = moduleNameParts[0] && moduleNameParts[0].toLowerCase();
        var subModuleName = moduleNameParts[1] && moduleNameParts[1].toLowerCase();
        if (subModuleName && getConstructorName(unknown) !== subModuleName) {
            return false;
        }
        var walkingModule = unknown;
        while (true) {
            if (getConstructorName(walkingModule) === parentModuleName) {
                return true;
            }
            walkingModule = walkingModule.parent;
            if (!walkingModule) {
                return false;
            }
        }
    };
    /**
     * Create a properly-formatted User-Agent string from a package.json file.
     *
     * @param {object} packageJson - A module's package.json file.
     * @return {string} userAgent - The formatted User-Agent string.
     */
    Util.prototype.getUserAgentFromPackageJson = function (packageJson) {
        var hyphenatedPackageName = packageJson.name
            .replace('@google-cloud', 'gcloud-node') // For legacy purposes.
            .replace('/', '-'); // For UA spec-compliance purposes.
        return hyphenatedPackageName + '/' + packageJson.version;
    };
    return Util;
}());
exports.Util = Util;
var util = new Util();
exports.util = util;
//# sourceMappingURL=util.js.map